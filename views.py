import discord
from discord.ext import commands
from typing import Optional
from models import get_tier_emoji
from config import Config

class TierApplicationModal(discord.ui.Modal):
    def __init__(self):
        super().__init__(title="–ó–∞—è–≤–∫–∞ –Ω–∞ —Ç–∏—Ä")
        
        self.game_id = discord.ui.TextInput(
            label="ID –≤ –∏–≥—Ä–µ",
            placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à ID –≤ –∏–≥—Ä–µ",
            required=True,
            max_length=100
        )
        
        self.game_nickname = discord.ui.TextInput(
            label="–ù–∏–∫ –≤ –∏–≥—Ä–µ",
            placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–∏–∫ –≤ –∏–≥—Ä–µ",
            required=True,
            max_length=100
        )
        
        self.current_clan = discord.ui.TextInput(
            label="–¢–µ–∫—É—â–∏–π –∫–ª–∞–Ω",
            placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –∫–ª–∞–Ω–∞",
            required=False,
            max_length=100
        )
        
        self.page_info = discord.ui.TextInput(
            label="–ü–µ–π–¥–∂",
            placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ–π–¥–∂–µ",
            required=False,
            max_length=200
        )
        
        self.desired_tier = discord.ui.TextInput(
            label="–ñ–µ–ª–∞–µ–º—ã–π —Ç–∏—Ä (T1-T5)",
            placeholder="T1, T2, T3, T4 –∏–ª–∏ T5",
            required=True,
            max_length=2
        )
        
        self.add_item(self.game_id)
        self.add_item(self.game_nickname)
        self.add_item(self.current_clan)
        self.add_item(self.page_info)
        self.add_item(self.desired_tier)
    
    async def on_submit(self, interaction: discord.Interaction):
        # Validate tier
        desired_tier = self.desired_tier.value.upper()
        if desired_tier not in Config.AVAILABLE_TIERS:
            await interaction.response.send_message(
                f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏—Ä! –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏—Ä—ã: {', '.join(Config.AVAILABLE_TIERS)}", 
                ephemeral=True
            )
            return
        
        # Check if user has pending application
        bot = interaction.client
        has_pending = await bot.db.has_pending_application(str(interaction.user.id))
        
        if has_pending:
            await interaction.response.send_message(
                "‚ùå –í–∞—à–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞ –µ—â–µ –Ω–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞! –î–æ–∂–¥–∏—Ç–µ—Å—å —Ä–µ—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –ø–æ—Å–ª–µ —á–µ–≥–æ —Å–º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É.",
                ephemeral=True
            )
            return
        
        # Create application
        try:
            app_id = await bot.db.create_application(
                discord_id=str(interaction.user.id),
                game_id=self.game_id.value,
                game_nickname=self.game_nickname.value,
                current_clan=self.current_clan.value or "–ù–µ —É–∫–∞–∑–∞–Ω",
                page_info=self.page_info.value or "–ù–µ —É–∫–∞–∑–∞–Ω",
                desired_tier=desired_tier
            )
            
            # Get applications channel
            channel_id = await bot.db.get_guild_applications_channel(str(interaction.guild.id))
            
            if not channel_id:
                await interaction.response.send_message(
                    "‚ùå –ö–∞–Ω–∞–ª –¥–ª—è –∑–∞—è–≤–æ–∫ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    ephemeral=True
                )
                return
            
            channel = bot.get_channel(int(channel_id))
            if not channel:
                await interaction.response.send_message(
                    "‚ùå –ö–∞–Ω–∞–ª –¥–ª—è –∑–∞—è–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω! –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                    ephemeral=True
                )
                return
            
            # Create embed for application
            embed = discord.Embed(
                title=f"üìã –ó–∞—è–≤–∫–∞ –Ω–∞ —Ç–∏—Ä {desired_tier}",
                color=Config.get_tier_color(desired_tier),
                timestamp=interaction.created_at
            )
            
            embed.add_field(name="üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", value=f"{interaction.user.mention}", inline=True)
            embed.add_field(name="üéÆ ID –≤ –∏–≥—Ä–µ", value=self.game_id.value, inline=True)
            embed.add_field(name="üè∑Ô∏è –ù–∏–∫ –≤ –∏–≥—Ä–µ", value=self.game_nickname.value, inline=True)
            embed.add_field(name="üè∞ –ö–ª–∞–Ω", value=self.current_clan.value or "–ù–µ —É–∫–∞–∑–∞–Ω", inline=True)
            embed.add_field(name="üìÑ –ü–µ–π–¥–∂", value=self.page_info.value or "–ù–µ —É–∫–∞–∑–∞–Ω", inline=True)
            embed.add_field(name="üéØ –ñ–µ–ª–∞–µ–º—ã–π —Ç–∏—Ä", value=f"{get_tier_emoji(desired_tier)} {desired_tier}", inline=True)
            
            embed.set_footer(text=f"ID –∑–∞—è–≤–∫–∏: {app_id}")
            
            # Create tier assignment view
            view = TierAssignmentView(app_id)
            
            # Send to applications channel
            message = await channel.send(embed=embed, view=view)
            
            await interaction.response.send_message(
                f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ç–∏—Ä {desired_tier} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è.",
                ephemeral=True
            )
            
        except Exception as e:
            print(f"Error creating application: {e}")
            await interaction.response.send_message(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                ephemeral=True
            )

class TierApplicationView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)
    
    @discord.ui.button(
        label="–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Ç–∏—Ä",
        style=discord.ButtonStyle.primary,
        emoji="üìã"
    )
    async def submit_application(self, interaction: discord.Interaction, button: discord.ui.Button):
        # Check user permissions
        guild_id = str(interaction.guild.id)
        bot = interaction.client
        
        # Get allowed roles
        allowed_roles = await bot.db.get_guild_allowed_roles(guild_id)
        
        if allowed_roles:
            # Check if user has required role
            user_role_ids = [str(role.id) for role in interaction.user.roles]
            has_permission = any(role_id in allowed_roles for role_id in user_role_ids)
            
            if not has_permission and not interaction.user.guild_permissions.administrator:
                await interaction.response.send_message(
                    "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏!",
                    ephemeral=True
                )
                return
        
        # Check if user already has pending application
        has_pending = await bot.db.has_pending_application(str(interaction.user.id))
        
        if has_pending:
            await interaction.response.send_message(
                "‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞—è–≤–∫–∞! –î–æ–∂–¥–∏—Ç–µ—Å—å —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è.",
                ephemeral=True
            )
            return
        
        modal = TierApplicationModal()
        await interaction.response.send_modal(modal)

class TierAssignmentView(discord.ui.View):
    def __init__(self, application_id: int):
        super().__init__(timeout=None)
        self.application_id = application_id
    
    @discord.ui.button(label="T1", style=discord.ButtonStyle.success, emoji="üèÜ")
    async def assign_t1(self, interaction: discord.Interaction, button: discord.ui.Button):
        await self.assign_tier(interaction, "T1")
    
    @discord.ui.button(label="T2", style=discord.ButtonStyle.secondary, emoji="ü•à")
    async def assign_t2(self, interaction: discord.Interaction, button: discord.ui.Button):
        await self.assign_tier(interaction, "T2")
    
    @discord.ui.button(label="T3", style=discord.ButtonStyle.secondary, emoji="ü•â")
    async def assign_t3(self, interaction: discord.Interaction, button: discord.ui.Button):
        await self.assign_tier(interaction, "T3")
    
    @discord.ui.button(label="T4", style=discord.ButtonStyle.secondary, emoji="üéñÔ∏è")
    async def assign_t4(self, interaction: discord.Interaction, button: discord.ui.Button):
        await self.assign_tier(interaction, "T4")
    
    @discord.ui.button(label="T5", style=discord.ButtonStyle.secondary, emoji="üèÖ")
    async def assign_t5(self, interaction: discord.Interaction, button: discord.ui.Button):
        await self.assign_tier(interaction, "T5")
    
    @discord.ui.button(label="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", style=discord.ButtonStyle.danger, emoji="‚ùå")
    async def reject_application(self, interaction: discord.Interaction, button: discord.ui.Button):
        await self.reject_application_handler(interaction)
    
    async def assign_tier(self, interaction: discord.Interaction, tier: str):
        """Assign tier to user"""
        # Check admin permissions
        guild_id = str(interaction.guild.id)
        bot = interaction.client
        
        # Get admin roles
        admin_roles = await bot.db.get_guild_admin_roles(guild_id)
        
        if admin_roles:
            # Check if user has admin role
            user_role_ids = [str(role.id) for role in interaction.user.roles]
            has_admin_permission = any(role_id in admin_roles for role_id in user_role_ids)
            
            if not has_admin_permission and not interaction.user.guild_permissions.administrator:
                await interaction.response.send_message(
                    "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–¥–∞—á–∏ —Ç–∏—Ä–æ–≤!",
                    ephemeral=True
                )
                return
        elif not interaction.user.guild_permissions.administrator:
            await interaction.response.send_message(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–¥–∞—á–∏ —Ç–∏—Ä–æ–≤!",
                ephemeral=True
            )
            return
        
        try:
            bot = interaction.client
            
            # Get application
            app = await bot.db.get_application(self.application_id)
            if not app:
                await interaction.response.send_message(
                    "‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!",
                    ephemeral=True
                )
                return
            
            if app['status'] != 'pending':
                await interaction.response.send_message(
                    "‚ùå –≠—Ç–∞ –∑–∞—è–≤–∫–∞ —É–∂–µ –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞!",
                    ephemeral=True
                )
                return
            
            # Assign tier
            await bot.db.assign_tier(
                discord_id=app['discord_id'],
                new_tier=tier,
                assigned_by=str(interaction.user.id),
                application_id=self.application_id
            )
            
            # Update application status
            await bot.db.update_application_status(
                app_id=self.application_id,
                status='approved',
                processed_by=str(interaction.user.id)
            )
            
            # Update embed
            embed = interaction.message.embeds[0]
            embed.color = Config.get_tier_color(tier)
            embed.title = f"‚úÖ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ - –¢–∏—Ä {tier}"
            embed.add_field(
                name="üë®‚Äçüíº –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ",
                value=f"{interaction.user.mention} - {tier}",
                inline=False
            )
            
            # Disable buttons
            for item in self.children:
                item.disabled = True
            
            await interaction.response.edit_message(embed=embed, view=self)
            
            # Update tier list
            try:
                tier_commands = bot.get_cog('TierCommands')
                if tier_commands:
                    await tier_commands.update_tierlist(str(interaction.guild.id))
            except Exception as e:
                print(f"Error updating tierlist: {e}")
            
            # Notify user
            try:
                user = bot.get_user(int(app['discord_id']))
                if user:
                    await user.send(
                        f"üéâ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ç–∏—Ä –æ–¥–æ–±—Ä–µ–Ω–∞! –í–∞–º –ø—Ä–∏—Å–≤–æ–µ–Ω —Ç–∏—Ä **{tier}** {get_tier_emoji(tier)}\n\n"
                        f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∏—Ä–∞, –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è."
                    )
            except:
                pass  # User might have DMs disabled
            
        except Exception as e:
            print(f"Error assigning tier: {e}")
            await interaction.response.send_message(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ —Ç–∏—Ä–∞.",
                ephemeral=True
            )
    
    async def reject_application_handler(self, interaction: discord.Interaction):
        """Reject application"""
        # Check admin permissions
        guild_id = str(interaction.guild.id)
        bot = interaction.client
        
        # Get admin roles
        admin_roles = await bot.db.get_guild_admin_roles(guild_id)
        
        if admin_roles:
            # Check if user has admin role
            user_role_ids = [str(role.id) for role in interaction.user.roles]
            has_admin_permission = any(role_id in admin_roles for role_id in user_role_ids)
            
            if not has_admin_permission and not interaction.user.guild_permissions.administrator:
                await interaction.response.send_message(
                    "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–æ–∫!",
                    ephemeral=True
                )
                return
        elif not interaction.user.guild_permissions.administrator:
            await interaction.response.send_message(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–æ–∫!",
                ephemeral=True
            )
            return
        
        try:
            bot = interaction.client
            
            # Get application
            app = await bot.db.get_application(self.application_id)
            if not app:
                await interaction.response.send_message(
                    "‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!",
                    ephemeral=True
                )
                return
            
            if app['status'] != 'pending':
                await interaction.response.send_message(
                    "‚ùå –≠—Ç–∞ –∑–∞—è–≤–∫–∞ —É–∂–µ –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞!",
                    ephemeral=True
                )
                return
            
            # Update application status
            await bot.db.update_application_status(
                app_id=self.application_id,
                status='rejected',
                processed_by=str(interaction.user.id)
            )
            
            # Update embed
            embed = interaction.message.embeds[0]
            embed.color = Config.COLOR_ERROR
            embed.title = "‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞"
            embed.add_field(
                name="üë®‚Äçüíº –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ",
                value=f"{interaction.user.mention} - –û—Ç–∫–ª–æ–Ω–µ–Ω–∞",
                inline=False
            )
            
            # Disable buttons
            for item in self.children:
                item.disabled = True
            
            await interaction.response.edit_message(embed=embed, view=self)
            
            # Notify user
            try:
                user = bot.get_user(int(app['discord_id']))
                if user:
                    await user.send(
                        "‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ç–∏—Ä –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n\n"
                        "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏."
                    )
            except:
                pass  # User might have DMs disabled
            
        except Exception as e:
            print(f"Error rejecting application: {e}")
            await interaction.response.send_message(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏.",
                ephemeral=True
            )
