#!/usr/bin/env python3
"""
–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π —Ö–æ—Å—Ç –¥–ª—è Discord –±–æ—Ç–∞
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—É—é —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞ 24/7
"""

import asyncio
import subprocess
import time
import os
import sys
import signal
import threading
from datetime import datetime, timedelta
import requests
import json
from pathlib import Path

class PermanentBotHost:
    def __init__(self):
        self.bot_process = None
        self.should_run = True
        self.restart_count = 0
        self.last_restart = datetime.now()
        self.status_file = Path("bot_status.json")
        self.log_file = Path("bot_host.log")
        
    def log(self, message):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π"""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        log_message = f"[{timestamp}] {message}"
        print(log_message)
        
        # –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª
        try:
            with open(self.log_file, "a", encoding="utf-8") as f:
                f.write(log_message + "\n")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥: {e}")
    
    def save_status(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ —Ñ–∞–π–ª"""
        try:
            status = {
                "running": self.bot_process is not None and self.bot_process.poll() is None,
                "restart_count": self.restart_count,
                "last_restart": self.last_restart.isoformat(),
                "uptime_start": datetime.now().isoformat(),
                "pid": self.bot_process.pid if self.bot_process else None
            }
            
            with open(self.status_file, "w", encoding="utf-8") as f:
                json.dump(status, f, indent=2)
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
    
    def start_bot(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            self.log("üöÄ –ó–∞–ø—É—Å–∫ Discord –±–æ—Ç–∞...")
            
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
            env = os.environ.copy()
            env['PYTHONUNBUFFERED'] = '1'
            
            self.bot_process = subprocess.Popen(
                [sys.executable, "main.py"],
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT,
                universal_newlines=True,
                bufsize=1,
                env=env
            )
            
            self.log(f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å PID: {self.bot_process.pid}")
            self.save_status()
            
            # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤—ã–≤–æ–¥–∞
            output_thread = threading.Thread(target=self.monitor_output)
            output_thread.daemon = True
            output_thread.start()
            
            return True
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            return False
    
    def monitor_output(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—ã–≤–æ–¥–∞ –±–æ—Ç–∞"""
        try:
            for line in iter(self.bot_process.stdout.readline, ''):
                if line:
                    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤–∞–∂–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                    line = line.strip()
                    if any(keyword in line.lower() for keyword in 
                           ['error', 'exception', 'connected', 'synced', 'starting']):
                        self.log(f"BOT: {line}")
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤—ã–≤–æ–¥–∞: {e}")
    
    def is_bot_healthy(self):
        """–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–æ—Ç–∞"""
        if not self.bot_process:
            return False, "–ü—Ä–æ—Ü–µ—Å—Å –Ω–µ –∑–∞–ø—É—â–µ–Ω"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞
        if self.bot_process.poll() is not None:
            return False, "–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ HTTP —Å–µ—Ä–≤–µ—Ä–∞
        try:
            response = requests.get("http://localhost:8080/health", timeout=10)
            if response.status_code == 200:
                return True, "–í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç"
            else:
                return False, f"HTTP —Å—Ç–∞—Ç—É—Å {response.status_code}"
        except requests.exceptions.RequestException as e:
            return False, f"HTTP –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}"
    
    def stop_bot(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        if self.bot_process:
            self.log("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
            try:
                self.bot_process.terminate()
                self.bot_process.wait(timeout=15)
            except subprocess.TimeoutExpired:
                self.log("‚ö†Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
                self.bot_process.kill()
                self.bot_process.wait()
            self.bot_process = None
            self.log("‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def restart_bot(self):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        self.restart_count += 1
        self.last_restart = datetime.now()
        
        self.log(f"üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ #{self.restart_count}")
        
        self.stop_bot()
        time.sleep(10)  # –ü–∞—É–∑–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
        
        if self.start_bot():
            self.log("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω")
        else:
            self.log("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞")
            
        self.save_status()
    
    def cleanup_logs(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤"""
        try:
            if self.log_file.exists():
                file_size = self.log_file.stat().st_size
                if file_size > 10 * 1024 * 1024:  # 10MB
                    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5MB
                    with open(self.log_file, "r", encoding="utf-8") as f:
                        lines = f.readlines()
                    
                    # –û—Å—Ç–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 —Å—Ç—Ä–æ–∫
                    with open(self.log_file, "w", encoding="utf-8") as f:
                        f.writelines(lines[-1000:])
                    
                    self.log("üßπ –û—á–∏—â–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏")
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤: {e}")
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.log("üéØ –ó–∞–ø—É—Å–∫ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Ö–æ—Å—Ç–∞ Discord –±–æ—Ç–∞")
        self.log("üîß –°–∏—Å—Ç–µ–º–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—É—é —Ä–∞–±–æ—Ç—É 24/7")
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        if not self.start_bot():
            self.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")
            return
        
        check_interval = 30  # —Å–µ–∫—É–Ω–¥
        last_cleanup = datetime.now()
        
        # –¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        while self.should_run:
            try:
                time.sleep(check_interval)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
                is_healthy, status_message = self.is_bot_healthy()
                
                if not is_healthy:
                    self.log(f"‚ö†Ô∏è –ë–æ—Ç –Ω–µ–∑–¥–æ—Ä–æ–≤: {status_message}")
                    self.restart_bot()
                else:
                    # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç –æ —Ä–∞–±–æ—Ç–µ
                    uptime = datetime.now() - self.last_restart
                    if uptime.total_seconds() % 3600 < check_interval:  # –ö–∞–∂–¥—ã–π —á–∞—Å
                        self.log(f"üíö –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ (–≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime}, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤: {self.restart_count})")
                
                # –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ —Ä–∞–∑ –≤ –¥–µ–Ω—å
                if datetime.now() - last_cleanup > timedelta(days=1):
                    self.cleanup_logs()
                    last_cleanup = datetime.now()
                
            except KeyboardInterrupt:
                self.log("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
                self.should_run = False
            except Exception as e:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                time.sleep(30)
        
        self.stop_bot()
        self.log("üèÅ –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π —Ö–æ—Å—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        self.log(f"üì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}")
        self.should_run = False

def main():
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ —Ö–æ—Å—Ç–∞
    host = PermanentBotHost()
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGTERM, host.signal_handler)
    signal.signal(signal.SIGINT, host.signal_handler)
    
    try:
        host.run()
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    sys.exit(main())